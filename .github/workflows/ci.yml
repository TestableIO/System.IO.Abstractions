name: Continuous Integration
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: | 
            3.1.x
            5.0.x
            6.0.x
      - name: Run tests
        run: dotnet test --collect:"XPlat Code Coverage"  --logger "GitHubActions"
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: Code coverage ${{ matrix.os }}
          path: "**/coverage.cobertura.xml"
  coverage:
    name: Coverage
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
      - uses: actions/download-artifact@v3
        with:
          name: Code coverage ubuntu-latest
          path: coverage-ubuntu
      - uses: actions/download-artifact@v3
        with:
          name: Code coverage windows-latest
          path: coverage-windows
      - uses: actions/download-artifact@v3
        with:
          name: Code coverage macos-latest
          path: coverage-macos
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.6
        with:
          reports: "**/coverage.cobertura.xml"
          targetdir: "coverage-report"
          reporttypes: "Cobertura"
      - name: Publish coverage report to Codacy
        uses: codacy/codacy-coverage-reporter-action@master
        if: github.repository == 'TestableIO/System.IO.Abstractions' && github.event_name == 'push'
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage-report/Cobertura.xml
  pack:
    name: Pack
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
      - name: Create packages
        run: dotnet pack --configuration Release --output ./packages
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: NuGet packages
          path: packages/*.*
  deploy:
    name: Deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [pack]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
      - uses: actions/download-artifact@v3
        with:
          name: NuGet packages
          path: packages
      - name: Push packages
        run: dotnet nuget push "packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      - uses: dotnet/nbgv@v0.4.0
        id: nbgv
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.nbgv.outputs.SemVer2 }}
          tag_name: v${{ steps.nbgv.outputs.SemVer2 }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
      - name: Comment relevant issues and merge requests
        uses: apexskier/github-release-commenter@v1.3.2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          comment-template: |
            This is addressed in release {release_link}.
          label-template: |
            state: released
